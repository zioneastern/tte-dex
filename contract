# SPDX-License-Identifier: MIT struct PaymentDetails: bank_name: String[100] account_number: String[100] swift_or_iban: String[100] card_number: String[100] struct UserSettings: default_fiat: String[10] notifications_enabled: bool profile_public: bool dark_mode: bool payment_details: HashMap[address, PaymentDetails] user_settings: HashMap[address, UserSettings] owner: public(address) fee_bps: public(uint256) # Fee in basis points (e.g., 30 = 0.3%) fee_recipient: public(address) total_fees_collected: public(uint256) # Total ETH fees collected event PaymentDetailsUpdated: user: indexed(address) fee_amount: uint256 event UserSettingsUpdated: user: indexed(address) fee_amount: uint256 event FeeRecipientUpdated: new_recipient: address event FeeBpsUpdated: new_fee_bps: uint256 @external def __init__(): self.owner = msg.sender self.fee_bps = 30 # Default 0.3% (30 basis points) self.fee_recipient = msg.sender @external def set_fee_recipient(new_recipient: address): assert msg.sender == self.owner, "Only owner" assert new_recipient != empty(address), "Invalid recipient" self.fee_recipient = new_recipient log FeeRecipientUpdated(new_recipient) @external def set_fee_bps(new_fee_bps: uint256): assert msg.sender == self.owner, "Only owner" assert new_fee_bps <= 1000, "Fee too high" # Max 10% self.fee_bps = new_fee_bps log FeeBpsUpdated(new_fee_bps) @external @payable def set_payment_details(bank_name: String[100], account_number: String[100], swift_or_iban: String[100], card_number: String[100]): assert len(bank_name) <= 100, "Bank name too long" assert len(account_number) <= 100, "Account number too long" assert len(swift_or_iban) <= 100, "SWIFT/IBAN too long" assert len(card_number) <= 100, "Card number too long" fee_amount: uint256 = (msg.value * self.fee_bps) / 10000 assert msg.value >= fee_amount, "Insufficient ETH for fee" if fee_amount > 0: send(self.fee_recipient, fee_amount) self.total_fees_collected += fee_amount self.payment_details[msg.sender] = PaymentDetails({ bank_name: bank_name, account_number: account_number, swift_or_iban: swift_or_iban, card_number: card_number }) log PaymentDetailsUpdated(msg.sender, fee_amount) @external @payable def set_user_settings(default_fiat: String[10], notifications_enabled: bool, profile_public: bool, dark_mode: bool): assert len(default_fiat) <= 10, "Fiat type too long" fee_amount: uint256 = (msg.value * self.fee_bps) / 10000 assert msg.value >= fee_amount, "Insufficient ETH for fee" if fee_amount > 0: send(self.fee_recipient, fee_amount) self.total_fees_collected += fee_amount self.user_settings[msg.sender] = UserSettings({ default_fiat: default_fiat, notifications_enabled: notifications_enabled, profile_public: profile_public, dark_mode: dark_mode }) log UserSettingsUpdated(msg.sender, fee_amount) @external @view def get_payment_details(user: address) -> PaymentDetails: return self.payment_details[user] @external @view def get_user_settings(user: address) -> UserSettings: return self.user_settings[user] @external def delete_payment_details(): self.payment_details[msg.sender] = PaymentDetails({ bank_name: "", account_number: "", swift_or_iban: "", card_number: "" }) log PaymentDetailsUpdated(msg.sender, 0)